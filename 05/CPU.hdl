// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Check the type of instruction, namely, A-instruction or C-instruction
    
    // Write to A Register if A-instruction
    Mux16(a=instruction, b=outM2, sel=instruction[15], out=inA);
    Not(in=instruction[15], out=isAInstr);
    And(a=instruction[15], b=instruction[5], out=isCInstrForAReg);  
    Or(a=isAInstr, b=isCInstrForAReg, out=loadA);
    
    ARegister(in=inA, load=loadA, out=outA);
    
    // Write to D Register
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=outM2, load=loadD, out=outD);
    
    // Read A address or value from M
    Mux16(a=outA, b=inM, sel=instruction[12], out=aORm);
    
    ALU(x=outD, y=aORm, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=outM, out=outM2);

    // Compute load control bit for PC
    DMux8Way(in=instruction[15], sel=instruction[0..2], a=notUsed, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    
    And(a=nzr, b=nng, out=outJgt);
    And(a=outJgt, b=jgt, out=outJgt2);
    
    And(a=zr, b=jeq, out=outJeq);
    
    Or(a=nng, b=zr, out=outJge);
    And(a=outJge, b=jge, out=outJge2);
    
    And(a=ng, b=jlt, out=outJlt);
   
    And(a=nzr, b=jne, out=outJne);

    Or(a=ng, b=zr, out=outJle);
    And(a=outJle, b=jle, out=outJle2);

    Or8Way(in[0]=false, in[1]= outJgt2, in[2]=outJeq, in[3]=outJge2, in[4]=outJlt, in[5]=outJne, in[6]=outJle2, in[7]=jmp, out=loadPC);
    
    Not(in=loadPC, out=inc);
    PC(in=outA, reset=reset, load=loadPC, inc=inc, out[0..14]=pc);
 
    // Address of M
    And16(a=true, b=outA, out[0..14]=addressM);
   
    // Write to M
    And(a=instruction[15], b=instruction[3], out=writeM);
}
